@using HRExpert.Organization.DTO
@using HRExpert.Organization.BL
@model DocumentDto<SicklistDto>
@{
    this.Layout = "_Layout";
    ViewBag.Title = "Создание заявки";
    object htmlAttributes = new { @class = "form-control" };    
    var Options = new { htmlAttributes = htmlAttributes };
}
<ul class="breadcrumb">
    <li><a href="#">Табель</a></li>
    <li>@Html.ActionLink("Больничные","Index","Sicklist")</li>
    <li>@ViewBag.Title</li>
</ul>
<form method="post" enctype="multipart/form-data">
    <div class="panel panel-default">
        <div class="panel-heading">Данные заявки</div>
            <div class="panel-body FormContainer">
                @Html.ValidationSummary()
                <fieldset class="form-horizontal">
                    <div class="form-group">
                        <label class="col-sm-2" for="personName">Дата начала:</label>
                        <div class="col-sm-10">
                            @await Component.InvokeAsync("PersonSelect", new { fieldname = "Person.Id" })
                        </div>
                    </div>
                    <div class="form-group">
                        <label class="col-sm-2">Дата начала:</label>
                        <div class="col-sm-10">
                            @Html.EditorFor(model => model.Data.BeginDate, Options)
                            @Html.ValidationMessageFor(model => model.Data.BeginDate)
                        </div>
                    </div>
                    <div class="form-group ">
                        <label class="col-sm-2">Дата окончания:</label>
                        <div class="col-sm-10">
                            @Html.EditorFor(model => model.Data.EndDate, Options)
                            @Html.ValidationMessageFor(model => model.Data.EndDate)
                        </div>
                    </div>
                    <div class="form-group ">
                        <label for="personName" class="col-sm-2">Назначить с:</label>
                        <div class="col-sm-10">
                            @Html.EditorFor(model => model.Data.PaymentBeginDate, Options)
                        </div>
                    </div>
                    <div class="form-group">
                        <label class="col-sm-2">Номер больничного листа:</label>
                        <div class="col-sm-10">
                            @Html.EditorFor(x => x.Data.SicklistNumber, Options)
                            @Html.ValidationMessageFor(model=>model.Data.SicklistNumber)
                        </div>
                    </div>
                    <div class="form-group">
                        <label class="col-sm-2">Тип больничного листа:</label>
                        <div class="col-sm-10">
                            @await Component.InvokeAsync("ReferencySelect", new { referenceName = ReferenceNames.SicklistTypes, fieldname = "Data.SicklistType.Id" })
                        </div>
                    </div>
                    <div class="form-group">
                        <label class="col-sm-2">В случае ухода за ребенком:</label>
                        <div class="col-sm-10">
                            @await Component.InvokeAsync("ReferencySelect", new { referenceName = ReferenceNames.SicklistBabyMindingTypes, fieldname = "Data.SicklistBabyMindingType.Id" })
                        </div>
                    </div>
                    <div class="form-group">
                        <label class="col-sm-2">Процент оплаты заработка:</label>
                        <div class="col-sm-10">
                            @await Component.InvokeAsync("ReferencySelect", new { referenceName = ReferenceNames.SicklistPaymentPercent, fieldname = "Data.SicklistPaymentPercent.Id" })
                        </div>
                    </div>
                    <div class="form-group">
                        <label class="col-sm-2">Ограничение заработка (пособия):</label>
                        <div class="col-sm-10">
                            @await Component.InvokeAsync("ReferencySelect", new { referenceName = ReferenceNames.SicklistPaymentRestrictTypes, fieldname = "Data.SicklistPaymentRestrictType.Id" })
                        </div>
                    </div>
                    <div class="form-group">
                        <label class="col-sm-2">Снизить пособие за нарушение режима с:</label>
                        <div class="col-sm-10">
                            @Html.EditorFor(x => x.Data.PaymentDecreaseDate, Options)
                        </div>
                    </div>
                    <div class="form-group">
                        <label class="col-sm-2">Учитывать заработок предыдущих страхователей</label>
                        <div class="col-sm-10">
                            @Html.CheckBoxFor(x => x.Data.isPreviousPaymentCounted)
                        </div>
                    </div>
                    <div class="form-group">
                        <label class="col-sm-2">Доплачивать до среднего заработка</label>
                        <div class="col-sm-10">
                            @Html.CheckBoxFor(x => x.Data.isAddToFullPayment)
                        </div>
                    </div>
                    <div class="form-group">
                        <label class="col-sm-2">Больничный имеет продолжение</label>
                        <div class="col-sm-10">
                            @Html.EditorFor(x => x.Data.IsContinue)
                        </div>
                    </div>
                    <div class="form-group">
                        <label class="col-sm-2">Страховой стаж:</label>
                        <div class="col-sm-3">
                            @Html.EditorFor(x => x.Data.ExperienceYears, Options)
                        </div>
                        <label class="col-sm-1">лет</label>
                        <div class="col-sm-3">
                            @Html.EditorFor(x => x.Data.ExperienceMonth, Options)
                        </div>
                        <label class="col-sm-1">месяцев</label>
                    </div>
                    <div class="form-group">
                        <label class="col-sm-2">Заполнение табеля:</label>
                        <div class="col-sm-10">
                            @await Component.InvokeAsync("ReferencySelect", new { referenceName = ReferenceNames.TimesheetStatus, fieldname = "Data.TimesheetStatus.Id" })
                        </div>
                    </div>
                    <div class="form-group">
                        <label class="col-sm-2">Скан документа:</label>
                        <div class="col-sm-10">
                            <input type="file" name="Data.SicklistDocument" />
                            @Html.ValidationMessageFor(model=>model.Data.SicklistDocument)
                        </div>
                    </div>
                </fieldset>
            </div>
    </div>
    <div class="panel panel-default">
        <div class="panel-body ControlsContainer">
            <input type="submit" class="btn btn-success" value="Создать" />
        </div>
    </div>
</form>
<script>    
    $(document).ready(function () {
        $('#Data_BeginDate').datepicker({ dateFormat: 'dd.mm.yy' });
        $('#Data_EndDate').datepicker({ dateFormat: 'dd.mm.yy' });
        $('#Data_PaymentDecreaseDate').datepicker({ dateFormat: 'dd.mm.yy' });
        $('#Data_PaymentBeginDate').datepicker({ dateFormat: 'dd.mm.yy' });

        $('[name="Data.SicklistType.Id"]').change(function () {
            var val = $(this).val();
            if (val == 4) {
                $('[name="Data.SicklistBabyMindingType.Id"]').prop("disabled", false);
            }
            else { $('[name="Data.SicklistBabyMindingType.Id"]').prop("disabled", true); }
        }
        );
        $('[name="Data.SicklistType.Id"]').change();
    });
</script>

